import 'dart:async';

import 'package:autoequal/autoequal.dart';
import 'package:bloc/bloc.dart';
import 'package:bloc_concurrency/bloc_concurrency.dart' as con;
import 'package:equatable/equatable.dart';
import 'package:{{#snakeCase}}{{{project}}}{{/snakeCase}}_application/utils/bloc_extensions.dart';
import 'package:{{#snakeCase}}{{{project}}}{{/snakeCase}}_domain/domain.dart';

import 'package:{{#snakeCase}}{{{project}}}{{/snakeCase}}_application/utils/persist_bloc.dart';

part '{{#snakeCase}}{{{name}}}{{/snakeCase}}_bloc.g.dart';
part '{{#snakeCase}}{{{name}}}{{/snakeCase}}_event.dart';
part '{{#snakeCase}}{{{name}}}{{/snakeCase}}_state.dart';

// ignore: avoid_private_typedef_functions
typedef _Emitter = Emitter<{{#pascalCase}}{{{name}}}{{/pascalCase}}State>;

class {{#pascalCase}}{{{name}}}{{/pascalCase}}Bloc
    extends PersistBloc<{{#pascalCase}}{{{name}}}{{/pascalCase}}Event, {{#pascalCase}}{{{name}}}{{/pascalCase}}State> {
  {{#pascalCase}}{{{name}}}{{/pascalCase}}Bloc({
    required I{{#pascalCase}}{{{name}}}{{/pascalCase}}sCache {{#camelCase}}{{{name}}}{{/camelCase}}sCache,
    required I{{#pascalCase}}{{{name}}}{{/pascalCase}}sSource {{#camelCase}}{{{name}}}{{/camelCase}}sSource,
  })  : _{{#camelCase}}{{{name}}}{{/camelCase}}sCache = {{#camelCase}}{{{name}}}{{/camelCase}}sCache,
        _{{#camelCase}}{{{name}}}{{/camelCase}}sSource = {{#camelCase}}{{{name}}}{{/camelCase}}sSource,
        super(const _Loading()) {
    on<_Init>(_init, transformer: con.droppable());
    on<_Fetch>(_fetch, transformer: con.droppable());
    on<_Create>(_create, transformer: con.droppable());
    on<_Save>(_save, transformer: con.droppable());
    on<_Delete>(_delete, transformer: con.droppable());
    on<_CacheChanged>(_cacheChanged);
    on<_SourceChanged>(_sourceChanged);
  }

  final I{{#pascalCase}}{{{name}}}{{/pascalCase}}sCache _{{#camelCase}}{{{name}}}{{/camelCase}}sCache;
  final I{{#pascalCase}}{{{name}}}{{/pascalCase}}sSource _{{#camelCase}}{{{name}}}{{/camelCase}}sSource;

  late String _{{#camelCase}}{{{name}}}{{/camelCase}}Id;

  StreamSubscription<StreamResult<{{#pascalCase}}{{{name}}}{{/pascalCase}}>>? _listener;

  @override
  Future<void> close() async {
    await _listener?.cancel();

    await super.close();
  }

  @override
  Future<Stream<{{#pascalCase}}{{{name}}}{{/pascalCase}}State?>> listenForStorageChanges() async {
    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sCache.watchById(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    return result.asyncMap((event) {
      if (!state.isReady) {
        return null;
      }

      if (event.isFailure) {
        return null;
      }

      if (event.wasDeleted) {
        return null;
      }

      final {{#camelCase}}{{{name}}}{{/camelCase}} = event.value;

      if ({{#camelCase}}{{{name}}}{{/camelCase}} == null) {
        return null;
      }

      return _Ready({{#camelCase}}{{{name}}}{{/camelCase}});
    });
  }

  @override
  void onStorageChanged({{#pascalCase}}{{{name}}}{{/pascalCase}}State state) {
    if (state.isReady) {
      add(_CacheChanged(state.asReady));
    }
  }

  @override
  Future<void> persist({{#pascalCase}}{{{name}}}{{/pascalCase}}State state) async {
    if (!state.isReady) {
      return;
    }

    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sCache.byId(state.asReady.{{#camelCase}}{{{name}}}{{/camelCase}}.id);

    if (result.isSuccess && result.value == state.asReady.{{#camelCase}}{{{name}}}{{/camelCase}}) {
      return;
    }

    await _{{#camelCase}}{{{name}}}{{/camelCase}}sCache.save(state.asReady.{{#camelCase}}{{{name}}}{{/camelCase}});
  }

  @override
  Future<{{#pascalCase}}{{{name}}}{{/pascalCase}}State?> retrieve() async {
    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sCache.byId(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    if (result.isError) {
      return null;
    }

    return _Ready(result.value);
  }

  FutureOr<void> _cacheChanged(_CacheChanged event, _Emitter emit) async {
    emitNoCache(emit, event.state);
  }

  FutureOr<void> _create(_Create event, _Emitter emit) async {
    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sSource.create();

    if (result.isError) {
      emitError(emit, _Error(result.error));
      return;
    }

    _{{#camelCase}}{{{name}}}{{/camelCase}}Id = result.value.id;

    emit(_Ready(result.value));
  }

  FutureOr<void> _delete(_Delete event, _Emitter emit) async {
    await _{{#camelCase}}{{{name}}}{{/camelCase}}sCache.delete(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sSource.delete(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    if (result.isError) {
      emitError(emit, _Error(result.error));
      return;
    }

    emit(const _Deleted());
  }

  Future<void> _fetch(_Fetch event, _Emitter emit) async {
    await _getData(emit);
  }

  Future<void> _getData(_Emitter emit) async {
    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sSource.byId(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    if (result.isError) {
      emitError(emit, _Error(result.error));
      return;
    }

    emit(_Ready(result.value));

    await _listenToSourceChanges();
  }

  Future<void> _init(_Init event, _Emitter emit) async {
    _{{#camelCase}}{{{name}}}{{/camelCase}}Id = event.id;

    await hydrate(emit);

    await _getData(emit);
  }

  Future<void> _listenToSourceChanges() async {
    final stream = await _{{#camelCase}}{{{name}}}{{/camelCase}}sSource.watchById(_{{#camelCase}}{{{name}}}{{/camelCase}}Id);

    await _listener?.cancel();

    _listener = stream.listen((event) {
      if (event.wasDeleted) {
        add(const _SourceChanged(_Error('{{#sentenceCase}}{{{name}}}{{/sentenceCase}} was deleted')));
        return;
      }

      final {{#camelCase}}{{{name}}}{{/camelCase}} = event.value;

      if ({{#camelCase}}{{{name}}}{{/camelCase}} == null) {
        return;
      }

      final newState = _Ready({{#camelCase}}{{{name}}}{{/camelCase}});

      if (newState == state) {
        return;
      }

      add(_SourceChanged(newState));
    });
  }

  FutureOr<void> _save(_Save event, _Emitter emit) async {
    final result = await _{{#camelCase}}{{{name}}}{{/camelCase}}sSource.update(event.{{#camelCase}}{{{name}}}{{/camelCase}});

    if (result.isError) {
      emitError(emit, _Error(result.error));
      return;
    }

    emit(_Ready(event.{{#camelCase}}{{{name}}}{{/camelCase}}));
  }

  FutureOr<void> _sourceChanged(_SourceChanged event, _Emitter emit) async {
    await stopListeningToChanges();

    emit(event.state);
  }
}
