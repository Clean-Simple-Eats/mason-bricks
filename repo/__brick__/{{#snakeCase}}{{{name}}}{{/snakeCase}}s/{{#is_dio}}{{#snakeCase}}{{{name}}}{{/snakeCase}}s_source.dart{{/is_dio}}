import 'dart:developer';

import 'package:{{#snakeCase}}{{{project}}}{{/snakeCase}}_domain/domain.dart';

import 'package:data/util/util.dart';

class {{#pascalCase}}{{{name}}}{{/pascalCase}}sSource implements I{{#pascalCase}}{{{name}}}{{/pascalCase}}sSource {
  const {{#pascalCase}}{{{name}}}{{/pascalCase}}sSource();

  @override
  Future<RequestResult<List<{{#pascalCase}}{{{name}}}{{/pascalCase}}>>> all() async {
    try {
      final {{#camelCase}}{{{name}}}{{/camelCase}}s = <{{#pascalCase}}{{{name}}}{{/pascalCase}}>[];

      final result = await dio.get<Map>('${dio.url}/NOT_IMPLEMENTED');

      final data = result.data;

      if (data == null) {
        return RequestResult.failure('No data');
      }

      final {{#camelCase}}{{{name}}}{{/camelCase}}sJson = List<Map>.from(data as List);

      for (final {{#camelCase}}{{{name}}}{{/camelCase}}Json in {{#camelCase}}{{{name}}}{{/camelCase}}sJson) {
        try {
          {{#camelCase}}{{{name}}}{{/camelCase}}s.add(
            {{#pascalCase}}{{{name}}}{{/pascalCase}}.fromJson(
              Map<String, dynamic>.from({{#camelCase}}{{{name}}}{{/camelCase}}Json),
            ),
          );
        } catch (e) {
          log('Error parsing {{#camelCase}}{{{name}}}{{/camelCase}}, $e | ${{#camelCase}}{{{name}}}{{/camelCase}}Json');
        }
      }

      return RequestResult.success({{#camelCase}}{{{name}}}{{/camelCase}}s);
    } catch (e) {
      return RequestResult.failure(e.toString());
    }
  }

  @override
  Future<RequestResult<{{#pascalCase}}{{{name}}}{{/pascalCase}}>> byId(String id) async {
    try {
      final result = await dio.get<Map>('${dio.url}/NOT_IMPLEMENTED/$id');

      final data = result.data;

      if (data == null) {
        return RequestResult.failure('No data');
      }

      final {{#camelCase}}{{{name}}}{{/camelCase}}Json = Map<String, dynamic>.from(data);

      return RequestResult.success(
        {{#pascalCase}}{{{name}}}{{/pascalCase}}.fromJson({{#camelCase}}{{{name}}}{{/camelCase}}Json),
      );
    } catch (e) {
      return RequestResult.failure(e.toString());
    }
  }

  @override
  Future<RequestResult<void>> delete(String id) async {
    try {
      await dio.delete<Map>(
        '${dio.url}/NOT_IMPLEMENTED/$id',
      );

      return const RequestResult.success(null);
    } catch (e) {
      return RequestResult.failure(e.toString());
    }
  }

  @override
  Future<RequestResult<void>> update({{#pascalCase}}{{{name}}}{{/pascalCase}} {{#camelCase}}{{{name}}}{{/camelCase}}) async {
    try {
      final id = {{#camelCase}}{{{name}}}{{/camelCase}}.id;

      await dio.put<Map>(
        '${dio.url}/NOT_IMPLEMENTED/$id',
        data: {{#camelCase}}{{{name}}}{{/camelCase}}.toJson(),
      );
    } catch (e) {
      return RequestResult.failure(e.toString());
    }

    return const RequestResult.success(null);
  }
}
